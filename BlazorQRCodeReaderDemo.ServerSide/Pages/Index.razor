@page "/"
@inject ISnackbar Snackbar

<div class="d-flex justify-center">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenReader" Class="my-4">Scan Qr Code</MudButton>
</div>

<div class="d-flex justify-center">
    @if (showScanBarcode)
    {
        <BarcodeReader 
            @ref="barcodeReader"
            ScanResult="ApplyQrCode"
            Close="CloseReader"
            OnError="ApplyError"
            UseBuiltinDiv="false" />
        
        <div @ref="barcodeReader!.barcodeScannerElement">
            <div style="max-width: 100%">
                <div style="display: none">
                    <div data-action="sourceSelectPanel" style="display:none">
                        <label for="sourceSelect">Select camera:</label>
                        <span data-action="result"></span>
                        <select data-action="sourceSelect" style="max-width:100%"></select>
                    </div>
                </div>

                <video id="video" playsinline autoplay style="max-width: 100%; object-fit: cover; aspect-ratio: 1/1;"></video>

                <button data-action="startButton" style="display:none">Scan</button>
                <button data-action="resetButton" style="display:none">Reset</button>
                <div class="d-flex justify-center">
                    <MudButton data-action="closeButton" Variant="Variant.Filled" Color="Color.Secondary" Class="my-4">Close</MudButton>
                </div>
            </div>
        </div>
    }
    else if (isLoadingSomething)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudText><p>@errorMessage</p></MudText>
    }
</div>

@code {

    BarcodeReader? barcodeReader;
    private bool showScanBarcode = false;
    private string? barCode;
    private string? errorMessage;
    private bool isLoadingSomething;

    private Task ApplyError(string message)
    {
        showScanBarcode = false;
        this.errorMessage = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ApplyQrCode(string result)
    {
        Snackbar.Add($"QrCode read: {result}");
        showScanBarcode = false;
        await DoSomething();
    }

    private void CloseReader()
    {
        showScanBarcode = false;
    }

    private void OpenReader()
    {
        showScanBarcode = true;
    }

    private async Task DoSomething()
    {
        isLoadingSomething = true;
        await Task.Delay(2000);
        Snackbar.Add("Did something!", Severity.Success);
        isLoadingSomething = false;
    }

}